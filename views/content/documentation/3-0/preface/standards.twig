{#
title: Coding Standards
sections:
    - Structure
    - Naming Conventions
    - Services Naming Conventions
    - Documentation
#}

{% extends "fizl::layouts/documentation" %}

{% block content %}
    {% markdown %}
    When contributing code to PyroCMS, you must follow its coding standards. In short, imitate the existing code. All AnomalyLabs packages follow the exact same coding standard, and now you can too!

    Remember that the main advantage of standards is that every piece of code looks and feels familiar, it's not about this or that being more readable.

    PyroCMS follows the standards defined in the [PSR-0](http://www.php-fig.org/psr/psr-0/), [PSR-1](http://www.php-fig.org/psr/psr-1/), [PSR-2](http://www.php-fig.org/psr/psr-2/) and [PSR-4](http://www.php-fig.org/psr/psr-4/) documents.

    Here's a short example containing most coding standards described below:

    <script src="https://gist.github.com/RyanThompson/ca3b35ffca01288a6d5d.js"></script>


    ## {{ html_anchor('structure', 'Structure') }}

    - Add a single space after each comma delimiter.
    - Add a single space around binary operators (`==`, `&&`, ...), with the exception of the concatenation (`.`) operator.
    - Do not use `AND` or `OR` logical operators. Use `&&` and `||` instead.
    - Place unary operators (`!`, `--`, ...) adjacent to the affected variable.
    - Always use identical comparison unless you need type juggling.
    - Always use PHP 5.4 style array syntax (`$array = []`).
    - Add a comma after each array item in a multi-line array, even after the last one.
    - Add a blank line before return statements, unless the return is alone inside a statement-group (like an if statement).
    - Add a blank line before code inside braces, unless the return is alone inside the braces (like an if statement or simple function).
    - Use braces to indicate control structure body regardless of the number of statements it contains.
    - Define one class per file - this does not apply to private helper classes that are not intended to be instantiated from the outside and thus are not concerned by the PSR-0 and PSR-4 autoload standards.
    - Declare class properties before methods.
    - Declare class properties defined in `__construct` last.
    - Use parentheses when instantiating classes regardless of the number of arguments the constructor has.


    ## {{ html_anchor('naming-conventions', 'Naming Conventions') }}

    - Use camelCase, **not** snake_case, for variable, function and method names, arguments, and properties.
    - Use underscores for option names and parameter names inside arrays.
    - Use namespaces for all classes.
    - Suffix abstract classes with Abstract.
    - Suffix interfaces with Interface.
    - Suffix traits with Trait.
    - Suffix exceptions with Exception.
    - Use alphanumeric characters and underscores for file names.
    - For type-hinting in PHPDocs and casting, use bool (instead of boolean or Boolean), int (instead of integer), float (instead of double or real).
    - Don't forget to look at the more verbose Conventions document for more subjective naming considerations.


    ## {{ html_anchor('services-naming-conventions', 'Services Naming Conventions') }}

    - Suffix service classes with their service type (FooCollection, FooModel, FooObserver, FooActivator, ...).
    - Use self handling commands when ever possible.
    - Avoid using Handler suffixes unless in the most generic cases.


    ## {{ html_anchor('documentation', 'Documentation') }}

    - Add PHPDoc blocks for all classes, methods, and functions.
    - Omit the @return tag if the method does not return anything.

    {% endmarkdown %}
{% endblock %}