{#
title: Installation
sections:
    - Install Composer
    - Install PyroCMS
    - Server Requirements
    - Configuration
    - Permissions
#}

{% extends "fizl::layouts/documentation" %}

{% block content %}
    {% markdown %}
    ## {{ html_anchor('install-composer', 'Install Composer') }}

    PyroCMS + Laravel utilize Composer to manage their dependencies. So, before using, you will need to make sure you
    have Composer installed on your machine.


    ## {{ html_anchor('install-pyrocms', 'Install PyroCMS') }}

    ### Via Composer Create-Project

    You may also install PyroCMS by issuing the Composer create-project command in your terminal:

    <script src="https://gist.github.com/RyanThompson/9d089913a9cf6d2ce896.js"></script>


    ## {{ html_anchor('server-requirements', 'Server Requirements') }}

    The Laravel framework has a few system requirements:

    - PHP >= 5.4
    - Mcrypt PHP Extension
    - OpenSSL PHP Extension
    - Mbstring PHP Extension
    - Tokenizer PHP Extension

    As of PHP 5.5, some OS distributions may require you to manually install the PHP JSON extension. When using Ubuntu,
    this can be done via apt-get install php5-json.


    ## {{ html_anchor('configuration', 'Configuration') }}

    The first thing you should do after installing Laravel is set your application key to a random string.
    If you installed Laravel via Composer, this key has probably already been set for you by the key:generate command.

    Typically, this string should be 32 characters long. The key can be set in the .env environment file.
    If the application key is not set, your user sessions and other encrypted data will not be secure!

    Laravel needs almost no other configuration out of the box. You are free to get started developing!
    However, you may wish to review the config/app.php file and its documentation. It contains several options such as
    timezone and locale that you may wish to change according to your application.

    Once Laravel is installed, you should also configure your local environment.

    Note: You should never have the app.debug configuration option set to true for a production application.


    ## {{ html_anchor('permissions', 'Permissions') }}

    Laravel may require some permissions to be configured: folders within storage and vendor require write access by the web server.


    ## {{ html_anchor('pretty-urls', 'Pretty URLs') }}

    ### Apache

    The framework ships with a public/.htaccess file that is used to allow URLs without index.php. If you use Apache to serve your Laravel application, be sure to enable the mod_rewrite module.

    If the .htaccess file that ships with Laravel does not work with your Apache installation, try this one:

    <script src="https://gist.github.com/RyanThompson/b2f70563e7b7748e2714.js"></script>

    ### Nginx

    On NGINX, the following directive in your site configuration will allow "pretty" URLs:

    <script src="https://gist.github.com/RyanThompson/2c5cf00f4f5c5538071e.js"></script>

    Of course, when using [Homestead](http://laravel.com/docs/5.0/homestead), pretty URLs will be configured automatically.
    {% endmarkdown %}
{% endblock %}